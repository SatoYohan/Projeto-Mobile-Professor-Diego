// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const html = dart_sdk.html;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const app_bar_theme = flutter_sdk.src__material__app_bar_theme;
  const colors$ = flutter_sdk.src__painting__colors;
  const card_theme = flutter_sdk.src__material__card_theme;
  const rounded_rectangle_border = flutter_sdk.src__painting__rounded_rectangle_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const framework = flutter_sdk.src__widgets__framework;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const async$ = flutter_sdk.src__widgets__async;
  const basic = flutter_sdk.src__widgets__basic;
  const progress_indicator = flutter_sdk.src__material__progress_indicator;
  const alignment = flutter_sdk.src__painting__alignment;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const card = flutter_sdk.src__material__card;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const list_tile = flutter_sdk.src__material__list_tile;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const checkbox = flutter_sdk.src__material__checkbox;
  const expansion_tile = flutter_sdk.src__material__expansion_tile;
  const date_format = flutter_sdk.src__intl__date_format;
  const flex = flutter_sdk.src__rendering__flex;
  const theme = flutter_sdk.src__material__theme;
  const divider = flutter_sdk.src__material__divider;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var tela_selecao_perfil = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var usuario_model = Object.create(dart.library);
  var app_repository = Object.create(dart.library);
  var tela_lista_pacientes = Object.create(dart.library);
  var tela_lista_tarefas_paciente = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var prontuario_model = Object.create(dart.library);
  var tarefa_model = Object.create(dart.library);
  var tela_detalhes_paciente = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $_set = dartx._set;
  var $startsWith = dartx.startsWith;
  var $keys = dartx.keys;
  var $where = dartx.where;
  var $cast = dartx.cast;
  var $addAll = dartx.addAll;
  var $toList = dartx.toList;
  var $expand = dartx.expand;
  var $indexWhere = dartx.indexWhere;
  var $add = dartx.add;
  var $firstWhere = dartx.firstWhere;
  var $isEmpty = dartx.isEmpty;
  var $clear = dartx.clear;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    BuildContextToTelaListaPacientes: () => (T.BuildContextToTelaListaPacientes = dart.constFn(dart.fnType(tela_lista_pacientes.TelaListaPacientes, [framework.BuildContext])))(),
    BuildContextToTelaListaTarefasPaciente: () => (T.BuildContextToTelaListaTarefasPaciente = dart.constFn(dart.fnType(tela_lista_tarefas_paciente.TelaListaTarefasPaciente, [framework.BuildContext])))(),
    ListOfUsuario: () => (T.ListOfUsuario = dart.constFn(core.List$(usuario_model.Usuario)))(),
    FutureBuilderOfListOfUsuario: () => (T.FutureBuilderOfListOfUsuario = dart.constFn(async$.FutureBuilder$(T.ListOfUsuario())))(),
    BuildContextAndintToCard: () => (T.BuildContextAndintToCard = dart.constFn(dart.fnType(card.Card, [framework.BuildContext, core.int])))(),
    AsyncSnapshotOfListOfUsuario: () => (T.AsyncSnapshotOfListOfUsuario = dart.constFn(async$.AsyncSnapshot$(T.ListOfUsuario())))(),
    BuildContextAndAsyncSnapshotOfListOfUsuarioToWidget: () => (T.BuildContextAndAsyncSnapshotOfListOfUsuarioToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T.AsyncSnapshotOfListOfUsuario()])))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    JSArrayOfUsuario: () => (T.JSArrayOfUsuario = dart.constFn(_interceptors.JSArray$(usuario_model.Usuario)))(),
    JSArrayOfProntuario: () => (T.JSArrayOfProntuario = dart.constFn(_interceptors.JSArray$(prontuario_model.Prontuario)))(),
    JSArrayOfTarefa: () => (T.JSArrayOfTarefa = dart.constFn(_interceptors.JSArray$(tarefa_model.Tarefa)))(),
    UsuarioTobool: () => (T.UsuarioTobool = dart.constFn(dart.fnType(core.bool, [usuario_model.Usuario])))(),
    ProntuarioTobool: () => (T.ProntuarioTobool = dart.constFn(dart.fnType(core.bool, [prontuario_model.Prontuario])))(),
    ListOfProntuario: () => (T.ListOfProntuario = dart.constFn(core.List$(prontuario_model.Prontuario)))(),
    ListOfTarefa: () => (T.ListOfTarefa = dart.constFn(core.List$(tarefa_model.Tarefa)))(),
    ProntuarioToListOfTarefa: () => (T.ProntuarioToListOfTarefa = dart.constFn(dart.fnType(T.ListOfTarefa(), [prontuario_model.Prontuario])))(),
    TarefaTobool: () => (T.TarefaTobool = dart.constFn(dart.fnType(core.bool, [tarefa_model.Tarefa])))(),
    BuildContextToTelaDetalhesPaciente: () => (T.BuildContextToTelaDetalhesPaciente = dart.constFn(dart.fnType(tela_detalhes_paciente.TelaDetalhesPaciente, [framework.BuildContext])))(),
    FutureBuilderOfListOfTarefa: () => (T.FutureBuilderOfListOfTarefa = dart.constFn(async$.FutureBuilder$(T.ListOfTarefa())))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    boolNTovoid: () => (T.boolNTovoid = dart.constFn(dart.fnType(dart.void, [T.boolN()])))(),
    AsyncSnapshotOfListOfTarefa: () => (T.AsyncSnapshotOfListOfTarefa = dart.constFn(async$.AsyncSnapshot$(T.ListOfTarefa())))(),
    BuildContextAndAsyncSnapshotOfListOfTarefaToWidget: () => (T.BuildContextAndAsyncSnapshotOfListOfTarefaToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T.AsyncSnapshotOfListOfTarefa()])))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    FutureBuilderOfListOfProntuario: () => (T.FutureBuilderOfListOfProntuario = dart.constFn(async$.FutureBuilder$(T.ListOfProntuario())))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    AsyncSnapshotOfListOfProntuario: () => (T.AsyncSnapshotOfListOfProntuario = dart.constFn(async$.AsyncSnapshot$(T.ListOfProntuario())))(),
    BuildContextAndAsyncSnapshotOfListOfProntuarioToWidget: () => (T.BuildContextAndAsyncSnapshotOfListOfProntuarioToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T.AsyncSnapshotOfListOfProntuario()])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292932337
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289912795
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286630852
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283283116
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280723098
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278228616
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278225275
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278221163
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278217052
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278209856
      });
    },
    get C4() {
      return C[4] = dart.constMap(core.int, ui.Color, [50, C[5] || CT.C5, 100, C[6] || CT.C6, 200, C[7] || CT.C7, 300, C[8] || CT.C8, 400, C[9] || CT.C9, 500, C[10] || CT.C10, 600, C[11] || CT.C11, 700, C[12] || CT.C12, 800, C[13] || CT.C13, 900, C[14] || CT.C14]);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: colors.MaterialColor.prototype,
        [Color_value]: 4278228616,
        [ColorSwatch__swatch]: C[4] || CT.C4
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: app_bar_theme.AppBarTheme.prototype,
        [AppBarTheme_backwardsCompatibility]: null,
        [AppBarTheme_systemOverlayStyle]: null,
        [AppBarTheme_titleTextStyle]: null,
        [AppBarTheme_toolbarTextStyle]: null,
        [AppBarTheme_toolbarHeight]: null,
        [AppBarTheme_titleSpacing]: null,
        [AppBarTheme_centerTitle]: null,
        [AppBarTheme_textTheme]: null,
        [AppBarTheme_actionsIconTheme]: null,
        [AppBarTheme_iconTheme]: null,
        [AppBarTheme_shape]: null,
        [AppBarTheme_surfaceTintColor]: null,
        [AppBarTheme_shadowColor]: null,
        [AppBarTheme_scrolledUnderElevation]: null,
        [AppBarTheme_elevation]: 1,
        [AppBarTheme_foregroundColor]: C[2] || CT.C2,
        [AppBarTheme_backgroundColor]: C[3] || CT.C3,
        [AppBarTheme_brightness]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: tela_selecao_perfil.TelaSelecaoPerfil.prototype,
        [Widget_key]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: main.ClinicaApp.prototype,
        [Widget_key]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Bem-vindo! Selecione seu perfil"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [_Enum__name]: "material",
        [_Enum_index]: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: progress_indicator.CircularProgressIndicator.prototype,
        [Widget_key]: null,
        [ProgressIndicator_semanticsValue]: null,
        [ProgressIndicator_semanticsLabel]: null,
        [ProgressIndicator_valueColor]: null,
        [ProgressIndicator_color]: null,
        [ProgressIndicator_backgroundColor]: null,
        [ProgressIndicator_value]: null,
        [CircularProgressIndicator_strokeWidth]: 4,
        [CircularProgressIndicator__indicatorType]: C[20] || CT.C20
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: alignment.Alignment.prototype,
        [Alignment_y]: 0,
        [Alignment_x]: 0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: basic.Center.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: C[19] || CT.C19,
        [Align_heightFactor]: null,
        [Align_widthFactor]: null,
        [Align_alignment]: C[21] || CT.C21
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 8
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: usuario_model.TipoUsuario.prototype,
        [_Enum__name]: "medico",
        [_Enum_index]: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: usuario_model.TipoUsuario.prototype,
        [_Enum__name]: "paciente",
        [_Enum_index]: 1
      });
    },
    get C24() {
      return C[24] = dart.constList([C[25] || CT.C25, C[26] || CT.C26], usuario_model.TipoUsuario);
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 864000000000
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 432000000000
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58519
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[31] || CT.C31
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Nenhuma tarefa designada."
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: basic.Center.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: C[33] || CT.C33,
        [Align_heightFactor]: null,
        [Align_widthFactor]: null,
        [Align_alignment]: C[21] || CT.C21
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Nenhum prontuário encontrado."
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: basic.Center.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: C[35] || CT.C35,
        [Align_heightFactor]: null,
        [Align_widthFactor]: null,
        [Align_alignment]: C[21] || CT.C21
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 984326
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[37] || CT.C37
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: divider.Divider.prototype,
        [Widget_key]: null,
        [Divider_color]: null,
        [Divider_endIndent]: null,
        [Divider_indent]: null,
        [Divider_thickness]: null,
        [Divider_height]: 20
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57415
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[41] || CT.C41
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[44] || CT.C44
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[43] || CT.C43,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    }
  }, false);
  var C = Array(45).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/pages/comum/tela_selecao_perfil.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.4/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "file:///zapp/project/lib/models/usuario_model.dart",
    "file:///zapp/project/lib/repositories/app_repository.dart",
    "file:///zapp/project/lib/pages/medico/tela_lista_pacientes.dart",
    "file:///zapp/project/lib/pages/paciente/tela_lista_tarefas_paciente.dart",
    "file:///zapp/project/lib/models/prontuario_model.dart",
    "file:///zapp/project/lib/models/tarefa_model.dart",
    "file:///zapp/project/lib/pages/medico/tela_detalhes_paciente.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  var AppBarTheme_backwardsCompatibility = dart.privateName(app_bar_theme, "AppBarTheme.backwardsCompatibility");
  var AppBarTheme_systemOverlayStyle = dart.privateName(app_bar_theme, "AppBarTheme.systemOverlayStyle");
  var AppBarTheme_titleTextStyle = dart.privateName(app_bar_theme, "AppBarTheme.titleTextStyle");
  var AppBarTheme_toolbarTextStyle = dart.privateName(app_bar_theme, "AppBarTheme.toolbarTextStyle");
  var AppBarTheme_toolbarHeight = dart.privateName(app_bar_theme, "AppBarTheme.toolbarHeight");
  var AppBarTheme_titleSpacing = dart.privateName(app_bar_theme, "AppBarTheme.titleSpacing");
  var AppBarTheme_centerTitle = dart.privateName(app_bar_theme, "AppBarTheme.centerTitle");
  var AppBarTheme_textTheme = dart.privateName(app_bar_theme, "AppBarTheme.textTheme");
  var AppBarTheme_actionsIconTheme = dart.privateName(app_bar_theme, "AppBarTheme.actionsIconTheme");
  var AppBarTheme_iconTheme = dart.privateName(app_bar_theme, "AppBarTheme.iconTheme");
  var AppBarTheme_shape = dart.privateName(app_bar_theme, "AppBarTheme.shape");
  var AppBarTheme_surfaceTintColor = dart.privateName(app_bar_theme, "AppBarTheme.surfaceTintColor");
  var AppBarTheme_shadowColor = dart.privateName(app_bar_theme, "AppBarTheme.shadowColor");
  var AppBarTheme_scrolledUnderElevation = dart.privateName(app_bar_theme, "AppBarTheme.scrolledUnderElevation");
  var AppBarTheme_elevation = dart.privateName(app_bar_theme, "AppBarTheme.elevation");
  var Color_value = dart.privateName(ui, "Color.value");
  var AppBarTheme_foregroundColor = dart.privateName(app_bar_theme, "AppBarTheme.foregroundColor");
  var ColorSwatch__swatch = dart.privateName(colors$, "ColorSwatch._swatch");
  var AppBarTheme_backgroundColor = dart.privateName(app_bar_theme, "AppBarTheme.backgroundColor");
  var AppBarTheme_brightness = dart.privateName(app_bar_theme, "AppBarTheme.brightness");
  var Widget_key = dart.privateName(framework, "Widget.key");
  main.ClinicaApp = class ClinicaApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.ClinicaApp.new({key: key});
    }
    build(context) {
      return new app.MaterialApp.new({title: "Gestão Clínica", debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.teal, visualDensity: theme_data.VisualDensity.adaptivePlatformDensity, scaffoldBackgroundColor: colors.Colors.grey._get(100), appBarTheme: C[1] || CT.C1, cardTheme: new card_theme.CardTheme.new({elevation: 1, shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.circular(8)})})}), home: C[15] || CT.C15});
    }
  };
  (main.ClinicaApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.ClinicaApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.ClinicaApp.prototype;
  dart.addTypeTests(main.ClinicaApp);
  dart.addTypeCaches(main.ClinicaApp);
  dart.setMethodSignature(main.ClinicaApp, () => ({
    __proto__: dart.getMethods(main.ClinicaApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.ClinicaApp, I[0]);
  main.main = function main$0() {
    binding.runApp(C[16] || CT.C16);
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  tela_selecao_perfil.TelaSelecaoPerfil = class TelaSelecaoPerfil extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new tela_selecao_perfil.TelaSelecaoPerfil.new({key: key});
    }
    createState() {
      return new tela_selecao_perfil._TelaSelecaoPerfilState.new();
    }
  };
  (tela_selecao_perfil.TelaSelecaoPerfil.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    tela_selecao_perfil.TelaSelecaoPerfil.__proto__.new.call(this, {key: key});
    ;
  }).prototype = tela_selecao_perfil.TelaSelecaoPerfil.prototype;
  dart.addTypeTests(tela_selecao_perfil.TelaSelecaoPerfil);
  dart.addTypeCaches(tela_selecao_perfil.TelaSelecaoPerfil);
  dart.setMethodSignature(tela_selecao_perfil.TelaSelecaoPerfil, () => ({
    __proto__: dart.getMethods(tela_selecao_perfil.TelaSelecaoPerfil.__proto__),
    createState: dart.fnType(framework.State$(tela_selecao_perfil.TelaSelecaoPerfil), [])
  }));
  dart.setLibraryUri(tela_selecao_perfil.TelaSelecaoPerfil, I[1]);
  var _repository = dart.privateName(tela_selecao_perfil, "_repository");
  var _entrarComo = dart.privateName(tela_selecao_perfil, "_entrarComo");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var ProgressIndicator_semanticsValue = dart.privateName(progress_indicator, "ProgressIndicator.semanticsValue");
  var ProgressIndicator_semanticsLabel = dart.privateName(progress_indicator, "ProgressIndicator.semanticsLabel");
  var ProgressIndicator_valueColor = dart.privateName(progress_indicator, "ProgressIndicator.valueColor");
  var ProgressIndicator_color = dart.privateName(progress_indicator, "ProgressIndicator.color");
  var ProgressIndicator_backgroundColor = dart.privateName(progress_indicator, "ProgressIndicator.backgroundColor");
  var ProgressIndicator_value = dart.privateName(progress_indicator, "ProgressIndicator.value");
  var CircularProgressIndicator_strokeWidth = dart.privateName(progress_indicator, "CircularProgressIndicator.strokeWidth");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var CircularProgressIndicator__indicatorType = dart.privateName(progress_indicator, "CircularProgressIndicator._indicatorType");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var Align_heightFactor = dart.privateName(basic, "Align.heightFactor");
  var Align_widthFactor = dart.privateName(basic, "Align.widthFactor");
  var Alignment_y = dart.privateName(alignment, "Alignment.y");
  var Alignment_x = dart.privateName(alignment, "Alignment.x");
  var Align_alignment = dart.privateName(basic, "Align.alignment");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  tela_selecao_perfil._TelaSelecaoPerfilState = class _TelaSelecaoPerfilState extends framework.State$(tela_selecao_perfil.TelaSelecaoPerfil) {
    [_entrarComo](usuario) {
      if (usuario.tipo === usuario_model.TipoUsuario.medico) {
        navigator.Navigator.push(dart.dynamic, this.context, new page.MaterialPageRoute.new({builder: dart.fn(context => new tela_lista_pacientes.TelaListaPacientes.new({medico: usuario}), T.BuildContextToTelaListaPacientes())}));
      } else {
        navigator.Navigator.push(dart.dynamic, this.context, new page.MaterialPageRoute.new({builder: dart.fn(context => new tela_lista_tarefas_paciente.TelaListaTarefasPaciente.new({paciente: usuario}), T.BuildContextToTelaListaTarefasPaciente())}));
      }
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[17] || CT.C17}), body: new (T.FutureBuilderOfListOfUsuario()).new({future: this[_repository].getTodosUsuarios(), builder: dart.fn((context, snapshot) => {
            if (!snapshot.hasData) {
              return C[18] || CT.C18;
            }
            let usuarios = dart.nullCheck(snapshot.data);
            return new scroll_view.ListView.builder({itemCount: usuarios[$length], itemBuilder: dart.fn((context, index) => {
                let usuario = usuarios[$_get](index);
                let isMedico = usuario.tipo === usuario_model.TipoUsuario.medico;
                return new card.Card.new({margin: C[22] || CT.C22, child: new list_tile.ListTile.new({leading: new icon.Icon.new(isMedico ? icons.Icons.medical_services : icons.Icons.person, {size: 40}), title: new text.Text.new(usuario.nome), subtitle: new text.Text.new(isMedico ? "Médico" : "Paciente"), onTap: dart.fn(() => this[_entrarComo](usuario), T.VoidTovoid())})});
              }, T.BuildContextAndintToCard())});
          }, T.BuildContextAndAsyncSnapshotOfListOfUsuarioToWidget())})});
    }
    static ['_#new#tearOff']() {
      return new tela_selecao_perfil._TelaSelecaoPerfilState.new();
    }
  };
  (tela_selecao_perfil._TelaSelecaoPerfilState.new = function() {
    this[_repository] = app_repository.AppRepository.new();
    tela_selecao_perfil._TelaSelecaoPerfilState.__proto__.new.call(this);
    ;
  }).prototype = tela_selecao_perfil._TelaSelecaoPerfilState.prototype;
  dart.addTypeTests(tela_selecao_perfil._TelaSelecaoPerfilState);
  dart.addTypeCaches(tela_selecao_perfil._TelaSelecaoPerfilState);
  dart.setMethodSignature(tela_selecao_perfil._TelaSelecaoPerfilState, () => ({
    __proto__: dart.getMethods(tela_selecao_perfil._TelaSelecaoPerfilState.__proto__),
    [_entrarComo]: dart.fnType(dart.void, [usuario_model.Usuario]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(tela_selecao_perfil._TelaSelecaoPerfilState, I[1]);
  dart.setFieldSignature(tela_selecao_perfil._TelaSelecaoPerfilState, () => ({
    __proto__: dart.getFields(tela_selecao_perfil._TelaSelecaoPerfilState.__proto__),
    [_repository]: dart.finalFieldType(app_repository.AppRepository)
  }));
  var _storedFlutterKeys = dart.privateName(shared_preferences_web, "_storedFlutterKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _checkPrefix = dart.privateName(shared_preferences_web, "_checkPrefix");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[2], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[23] || CT.C23)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[3]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[4]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        this[_storedFlutterKeys][$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_storedFlutterKeys]) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_checkPrefix](key);
        html.window[$localStorage][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_checkPrefix](key);
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_checkPrefix](key) {
      if (!key[$startsWith]("flutter.")) {
        dart.throw(new core.FormatException.new("Shared preferences keys must start with prefix \"flutter.\".", key, 0));
      }
    }
    get [_storedFlutterKeys]() {
      return html.window[$localStorage][$keys][$where](dart.fn(key => key[$startsWith]("flutter."), T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_checkPrefix]: dart.fnType(dart.void, [core.String]),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setGetterSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getGetters(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    [_storedFlutterKeys]: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[5]);
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  usuario_model.TipoUsuario = class TipoUsuario extends core._Enum {
    [_enumToString]() {
      return "TipoUsuario." + this[_name];
    }
  };
  (usuario_model.TipoUsuario.new = function(index, name) {
    usuario_model.TipoUsuario.__proto__.new.call(this, index, name);
    ;
  }).prototype = usuario_model.TipoUsuario.prototype;
  dart.addTypeTests(usuario_model.TipoUsuario);
  dart.addTypeCaches(usuario_model.TipoUsuario);
  dart.setMethodSignature(usuario_model.TipoUsuario, () => ({
    __proto__: dart.getMethods(usuario_model.TipoUsuario.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(usuario_model.TipoUsuario, I[6]);
  dart.setStaticFieldSignature(usuario_model.TipoUsuario, () => ['values', 'medico', 'paciente']);
  dart.defineLazy(usuario_model.TipoUsuario, {
    /*usuario_model.TipoUsuario.values*/get values() {
      return C[24] || CT.C24;
    },
    /*usuario_model.TipoUsuario.medico*/get medico() {
      return C[25] || CT.C25;
    },
    /*usuario_model.TipoUsuario.paciente*/get paciente() {
      return C[26] || CT.C26;
    }
  }, false);
  var id$ = dart.privateName(usuario_model, "Usuario.id");
  var nome$ = dart.privateName(usuario_model, "Usuario.nome");
  var tipo$ = dart.privateName(usuario_model, "Usuario.tipo");
  usuario_model.Usuario = class Usuario extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get nome() {
      return this[nome$];
    }
    set nome(value) {
      super.nome = value;
    }
    get tipo() {
      return this[tipo$];
    }
    set tipo(value) {
      super.tipo = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let nome = opts && 'nome' in opts ? opts.nome : null;
      let tipo = opts && 'tipo' in opts ? opts.tipo : null;
      return new usuario_model.Usuario.new({id: id, nome: nome, tipo: tipo});
    }
  };
  (usuario_model.Usuario.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let nome = opts && 'nome' in opts ? opts.nome : null;
    let tipo = opts && 'tipo' in opts ? opts.tipo : null;
    this[id$] = id;
    this[nome$] = nome;
    this[tipo$] = tipo;
    ;
  }).prototype = usuario_model.Usuario.prototype;
  dart.addTypeTests(usuario_model.Usuario);
  dart.addTypeCaches(usuario_model.Usuario);
  dart.setLibraryUri(usuario_model.Usuario, I[6]);
  dart.setFieldSignature(usuario_model.Usuario, () => ({
    __proto__: dart.getFields(usuario_model.Usuario.__proto__),
    id: dart.finalFieldType(core.String),
    nome: dart.finalFieldType(core.String),
    tipo: dart.finalFieldType(usuario_model.TipoUsuario)
  }));
  var _usuarios = dart.privateName(app_repository, "_usuarios");
  var _prontuarios = dart.privateName(app_repository, "_prontuarios");
  var _popularDadosIniciais = dart.privateName(app_repository, "_popularDadosIniciais");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  app_repository.AppRepository = class AppRepository extends core.Object {
    static new() {
      return app_repository.AppRepository._instancia;
    }
    static ['_#new#tearOff']() {
      return app_repository.AppRepository.new();
    }
    static ['_#_interno#tearOff']() {
      return new app_repository.AppRepository._interno();
    }
    [_popularDadosIniciais]() {
      let medico1 = new usuario_model.Usuario.new({id: "med1", nome: "Dr. House", tipo: usuario_model.TipoUsuario.medico});
      let paciente1 = new usuario_model.Usuario.new({id: "pac1", nome: "João da Silva", tipo: usuario_model.TipoUsuario.paciente});
      let paciente2 = new usuario_model.Usuario.new({id: "pac2", nome: "Maria Oliveira", tipo: usuario_model.TipoUsuario.paciente});
      this[_usuarios][$addAll](T.JSArrayOfUsuario().of([medico1, paciente1, paciente2]));
      let tarefasP1 = T.JSArrayOfTarefa().of([new tarefa_model.Tarefa.new({id: "t1", titulo: "Tomar Vitamina D", descricao: "1 cápsula após o almoço", concluida: true}), new tarefa_model.Tarefa.new({id: "t2", titulo: "Caminhada leve", descricao: "30 minutos, 3 vezes por semana"})]);
      let prontuario1 = new prontuario_model.Prontuario.new({id: "pront1", pacienteId: "pac1", dataConsulta: new core.DateTime.now().subtract(C[27] || CT.C27), notasMedico: "Paciente apresenta deficiência de vitamina D. Recomendo suplementação e atividade física.", tarefas: tarefasP1});
      let tarefasP2 = T.JSArrayOfTarefa().of([new tarefa_model.Tarefa.new({id: "t3", titulo: "Medir pressão", descricao: "Medir diariamente pela manhã"})]);
      let prontuario2 = new prontuario_model.Prontuario.new({id: "pront2", pacienteId: "pac2", dataConsulta: new core.DateTime.now().subtract(C[28] || CT.C28), notasMedico: "Acompanhar pressão arterial por uma semana. Retornar com anotações.", tarefas: tarefasP2});
      this[_prontuarios][$addAll](T.JSArrayOfProntuario().of([prontuario1, prontuario2]));
    }
    getTodosUsuarios() {
      return async.async(T.ListOfUsuario(), (function* getTodosUsuarios() {
        yield async.Future.delayed(C[29] || CT.C29);
        return this[_usuarios];
      }).bind(this));
    }
    getPacientes() {
      return async.async(T.ListOfUsuario(), (function* getPacientes() {
        yield async.Future.delayed(C[29] || CT.C29);
        return this[_usuarios][$where](dart.fn(u => u.tipo === usuario_model.TipoUsuario.paciente, T.UsuarioTobool()))[$toList]();
      }).bind(this));
    }
    getProntuariosPorPaciente(pacienteId) {
      return async.async(T.ListOfProntuario(), (function* getProntuariosPorPaciente() {
        yield async.Future.delayed(C[29] || CT.C29);
        return this[_prontuarios][$where](dart.fn(p => p.pacienteId === pacienteId, T.ProntuarioTobool()))[$toList]();
      }).bind(this));
    }
    getTarefasPorPaciente(pacienteId) {
      return async.async(T.ListOfTarefa(), (function* getTarefasPorPaciente() {
        yield async.Future.delayed(C[29] || CT.C29);
        let tarefas = this[_prontuarios][$where](dart.fn(p => p.pacienteId === pacienteId, T.ProntuarioTobool()))[$expand](tarefa_model.Tarefa, dart.fn(p => p.tarefas, T.ProntuarioToListOfTarefa()))[$toList]();
        return tarefas;
      }).bind(this));
    }
    salvarProntuario(prontuario) {
      return async.async(dart.void, (function* salvarProntuario() {
        yield async.Future.delayed(C[29] || CT.C29);
        let index = this[_prontuarios][$indexWhere](dart.fn(p => p.id === prontuario.id, T.ProntuarioTobool()));
        if (index >= 0) {
          this[_prontuarios][$_set](index, prontuario);
        } else {
          this[_prontuarios][$add](prontuario);
        }
      }).bind(this));
    }
    atualizarStatusTarefa(prontuarioId, tarefaId, concluida) {
      return async.async(dart.void, (function* atualizarStatusTarefa() {
        let prontuario = this[_prontuarios][$firstWhere](dart.fn(p => p.id === prontuarioId, T.ProntuarioTobool()));
        let tarefa = prontuario.tarefas[$firstWhere](dart.fn(t => t.id === tarefaId, T.TarefaTobool()));
        tarefa.concluida = concluida;
      }).bind(this));
    }
  };
  (app_repository.AppRepository._interno = function() {
    this[_usuarios] = T.JSArrayOfUsuario().of([]);
    this[_prontuarios] = T.JSArrayOfProntuario().of([]);
    this[_popularDadosIniciais]();
  }).prototype = app_repository.AppRepository.prototype;
  dart.addTypeTests(app_repository.AppRepository);
  dart.addTypeCaches(app_repository.AppRepository);
  dart.setMethodSignature(app_repository.AppRepository, () => ({
    __proto__: dart.getMethods(app_repository.AppRepository.__proto__),
    [_popularDadosIniciais]: dart.fnType(dart.void, []),
    getTodosUsuarios: dart.fnType(async.Future$(core.List$(usuario_model.Usuario)), []),
    getPacientes: dart.fnType(async.Future$(core.List$(usuario_model.Usuario)), []),
    getProntuariosPorPaciente: dart.fnType(async.Future$(core.List$(prontuario_model.Prontuario)), [core.String]),
    getTarefasPorPaciente: dart.fnType(async.Future$(core.List$(tarefa_model.Tarefa)), [core.String]),
    salvarProntuario: dart.fnType(async.Future$(dart.void), [prontuario_model.Prontuario]),
    atualizarStatusTarefa: dart.fnType(async.Future$(dart.void), [core.String, core.String, core.bool])
  }));
  dart.setStaticMethodSignature(app_repository.AppRepository, () => ['new']);
  dart.setLibraryUri(app_repository.AppRepository, I[7]);
  dart.setFieldSignature(app_repository.AppRepository, () => ({
    __proto__: dart.getFields(app_repository.AppRepository.__proto__),
    [_usuarios]: dart.finalFieldType(core.List$(usuario_model.Usuario)),
    [_prontuarios]: dart.finalFieldType(core.List$(prontuario_model.Prontuario))
  }));
  dart.setStaticFieldSignature(app_repository.AppRepository, () => ['_instancia']);
  dart.defineLazy(app_repository.AppRepository, {
    /*app_repository.AppRepository._instancia*/get _instancia() {
      return new app_repository.AppRepository._interno();
    }
  }, false);
  var medico$ = dart.privateName(tela_lista_pacientes, "TelaListaPacientes.medico");
  tela_lista_pacientes.TelaListaPacientes = class TelaListaPacientes extends framework.StatefulWidget {
    get medico() {
      return this[medico$];
    }
    set medico(value) {
      super.medico = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let medico = opts && 'medico' in opts ? opts.medico : null;
      return new tela_lista_pacientes.TelaListaPacientes.new({key: key, medico: medico});
    }
    createState() {
      return new tela_lista_pacientes._TelaListaPacientesState.new();
    }
  };
  (tela_lista_pacientes.TelaListaPacientes.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let medico = opts && 'medico' in opts ? opts.medico : null;
    this[medico$] = medico;
    tela_lista_pacientes.TelaListaPacientes.__proto__.new.call(this, {key: key});
    ;
  }).prototype = tela_lista_pacientes.TelaListaPacientes.prototype;
  dart.addTypeTests(tela_lista_pacientes.TelaListaPacientes);
  dart.addTypeCaches(tela_lista_pacientes.TelaListaPacientes);
  dart.setMethodSignature(tela_lista_pacientes.TelaListaPacientes, () => ({
    __proto__: dart.getMethods(tela_lista_pacientes.TelaListaPacientes.__proto__),
    createState: dart.fnType(framework.State$(tela_lista_pacientes.TelaListaPacientes), [])
  }));
  dart.setLibraryUri(tela_lista_pacientes.TelaListaPacientes, I[8]);
  dart.setFieldSignature(tela_lista_pacientes.TelaListaPacientes, () => ({
    __proto__: dart.getFields(tela_lista_pacientes.TelaListaPacientes.__proto__),
    medico: dart.finalFieldType(usuario_model.Usuario)
  }));
  var _repository$ = dart.privateName(tela_lista_pacientes, "_repository");
  var ___TelaListaPacientesState__futurePacientes = dart.privateName(tela_lista_pacientes, "_#_TelaListaPacientesState#_futurePacientes");
  var _futurePacientes = dart.privateName(tela_lista_pacientes, "_futurePacientes");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  tela_lista_pacientes._TelaListaPacientesState = class _TelaListaPacientesState extends framework.State$(tela_lista_pacientes.TelaListaPacientes) {
    get [_futurePacientes]() {
      let t2;
      t2 = this[___TelaListaPacientesState__futurePacientes];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_futurePacientes")) : t2;
    }
    set [_futurePacientes](_futurePacientes$35param) {
      this[___TelaListaPacientesState__futurePacientes] = _futurePacientes$35param;
    }
    initState() {
      super.initState();
      this[_futurePacientes] = this[_repository$].getPacientes();
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Meus Pacientes - " + this.widget.medico.nome)}), body: new (T.FutureBuilderOfListOfUsuario()).new({future: this[_futurePacientes], builder: dart.fn((context, snapshot) => {
            if (!snapshot.hasData) return C[18] || CT.C18;
            let pacientes = dart.nullCheck(snapshot.data);
            return new scroll_view.ListView.builder({itemCount: pacientes[$length], itemBuilder: dart.fn((context, index) => {
                let paciente = pacientes[$_get](index);
                return new card.Card.new({child: new list_tile.ListTile.new({leading: C[30] || CT.C30, title: new text.Text.new(paciente.nome), onTap: dart.fn(() => {
                      navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(_ => new tela_detalhes_paciente.TelaDetalhesPaciente.new({paciente: paciente}), T.BuildContextToTelaDetalhesPaciente())}));
                    }, T.VoidTovoid())})});
              }, T.BuildContextAndintToCard())});
          }, T.BuildContextAndAsyncSnapshotOfListOfUsuarioToWidget())})});
    }
    static ['_#new#tearOff']() {
      return new tela_lista_pacientes._TelaListaPacientesState.new();
    }
  };
  (tela_lista_pacientes._TelaListaPacientesState.new = function() {
    this[_repository$] = app_repository.AppRepository.new();
    this[___TelaListaPacientesState__futurePacientes] = null;
    tela_lista_pacientes._TelaListaPacientesState.__proto__.new.call(this);
    ;
  }).prototype = tela_lista_pacientes._TelaListaPacientesState.prototype;
  dart.addTypeTests(tela_lista_pacientes._TelaListaPacientesState);
  dart.addTypeCaches(tela_lista_pacientes._TelaListaPacientesState);
  dart.setMethodSignature(tela_lista_pacientes._TelaListaPacientesState, () => ({
    __proto__: dart.getMethods(tela_lista_pacientes._TelaListaPacientesState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(tela_lista_pacientes._TelaListaPacientesState, () => ({
    __proto__: dart.getGetters(tela_lista_pacientes._TelaListaPacientesState.__proto__),
    [_futurePacientes]: async.Future$(core.List$(usuario_model.Usuario))
  }));
  dart.setSetterSignature(tela_lista_pacientes._TelaListaPacientesState, () => ({
    __proto__: dart.getSetters(tela_lista_pacientes._TelaListaPacientesState.__proto__),
    [_futurePacientes]: async.Future$(core.List$(usuario_model.Usuario))
  }));
  dart.setLibraryUri(tela_lista_pacientes._TelaListaPacientesState, I[8]);
  dart.setFieldSignature(tela_lista_pacientes._TelaListaPacientesState, () => ({
    __proto__: dart.getFields(tela_lista_pacientes._TelaListaPacientesState.__proto__),
    [_repository$]: dart.finalFieldType(app_repository.AppRepository),
    [___TelaListaPacientesState__futurePacientes]: dart.fieldType(dart.nullable(async.Future$(core.List$(usuario_model.Usuario))))
  }));
  var paciente$ = dart.privateName(tela_lista_tarefas_paciente, "TelaListaTarefasPaciente.paciente");
  tela_lista_tarefas_paciente.TelaListaTarefasPaciente = class TelaListaTarefasPaciente extends framework.StatefulWidget {
    get paciente() {
      return this[paciente$];
    }
    set paciente(value) {
      super.paciente = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let paciente = opts && 'paciente' in opts ? opts.paciente : null;
      return new tela_lista_tarefas_paciente.TelaListaTarefasPaciente.new({key: key, paciente: paciente});
    }
    createState() {
      return new tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.new();
    }
  };
  (tela_lista_tarefas_paciente.TelaListaTarefasPaciente.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let paciente = opts && 'paciente' in opts ? opts.paciente : null;
    this[paciente$] = paciente;
    tela_lista_tarefas_paciente.TelaListaTarefasPaciente.__proto__.new.call(this, {key: key});
    ;
  }).prototype = tela_lista_tarefas_paciente.TelaListaTarefasPaciente.prototype;
  dart.addTypeTests(tela_lista_tarefas_paciente.TelaListaTarefasPaciente);
  dart.addTypeCaches(tela_lista_tarefas_paciente.TelaListaTarefasPaciente);
  dart.setMethodSignature(tela_lista_tarefas_paciente.TelaListaTarefasPaciente, () => ({
    __proto__: dart.getMethods(tela_lista_tarefas_paciente.TelaListaTarefasPaciente.__proto__),
    createState: dart.fnType(framework.State$(tela_lista_tarefas_paciente.TelaListaTarefasPaciente), [])
  }));
  dart.setLibraryUri(tela_lista_tarefas_paciente.TelaListaTarefasPaciente, I[9]);
  dart.setFieldSignature(tela_lista_tarefas_paciente.TelaListaTarefasPaciente, () => ({
    __proto__: dart.getFields(tela_lista_tarefas_paciente.TelaListaTarefasPaciente.__proto__),
    paciente: dart.finalFieldType(usuario_model.Usuario)
  }));
  var _repository$0 = dart.privateName(tela_lista_tarefas_paciente, "_repository");
  var ___TelaListaTarefasPacienteState__futureTarefas = dart.privateName(tela_lista_tarefas_paciente, "_#_TelaListaTarefasPacienteState#_futureTarefas");
  var _futureTarefas = dart.privateName(tela_lista_tarefas_paciente, "_futureTarefas");
  var _carregarTarefas = dart.privateName(tela_lista_tarefas_paciente, "_carregarTarefas");
  tela_lista_tarefas_paciente._TelaListaTarefasPacienteState = class _TelaListaTarefasPacienteState extends framework.State$(tela_lista_tarefas_paciente.TelaListaTarefasPaciente) {
    get [_futureTarefas]() {
      let t2;
      t2 = this[___TelaListaTarefasPacienteState__futureTarefas];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_futureTarefas")) : t2;
    }
    set [_futureTarefas](_futureTarefas$35param) {
      this[___TelaListaTarefasPacienteState__futureTarefas] = _futureTarefas$35param;
    }
    initState() {
      super.initState();
      this[_carregarTarefas]();
    }
    [_carregarTarefas]() {
      this.setState(dart.fn(() => {
        this[_futureTarefas] = this[_repository$0].getTarefasPorPaciente(this.widget.paciente.id);
      }, T.VoidTovoid()));
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Minhas Tarefas - " + this.widget.paciente.nome)}), body: new (T.FutureBuilderOfListOfTarefa()).new({future: this[_futureTarefas], builder: dart.fn((context, snapshot) => {
            if (snapshot.connectionState === async$.ConnectionState.waiting) {
              return C[18] || CT.C18;
            }
            if (!snapshot.hasData || dart.nullCheck(snapshot.data)[$isEmpty]) {
              return C[32] || CT.C32;
            }
            let tarefas = dart.nullCheck(snapshot.data);
            return new scroll_view.ListView.builder({itemCount: tarefas[$length], itemBuilder: dart.fn((context, index) => {
                let tarefa = tarefas[$_get](index);
                return new card.Card.new({child: new list_tile.ListTile.new({title: new text.Text.new(tarefa.titulo), subtitle: new text.Text.new(tarefa.descricao), leading: new checkbox.Checkbox.new({value: tarefa.concluida, onChanged: dart.fn(value => {
                        this.setState(dart.fn(() => {
                          tarefa.concluida = dart.nullCheck(value);
                        }, T.VoidTovoid()));
                      }, T.boolNTovoid())})})});
              }, T.BuildContextAndintToCard())});
          }, T.BuildContextAndAsyncSnapshotOfListOfTarefaToWidget())})});
    }
    static ['_#new#tearOff']() {
      return new tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.new();
    }
  };
  (tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.new = function() {
    this[_repository$0] = app_repository.AppRepository.new();
    this[___TelaListaTarefasPacienteState__futureTarefas] = null;
    tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.__proto__.new.call(this);
    ;
  }).prototype = tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.prototype;
  dart.addTypeTests(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState);
  dart.addTypeCaches(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState);
  dart.setMethodSignature(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState, () => ({
    __proto__: dart.getMethods(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.__proto__),
    [_carregarTarefas]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState, () => ({
    __proto__: dart.getGetters(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.__proto__),
    [_futureTarefas]: async.Future$(core.List$(tarefa_model.Tarefa))
  }));
  dart.setSetterSignature(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState, () => ({
    __proto__: dart.getSetters(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.__proto__),
    [_futureTarefas]: async.Future$(core.List$(tarefa_model.Tarefa))
  }));
  dart.setLibraryUri(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState, I[9]);
  dart.setFieldSignature(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState, () => ({
    __proto__: dart.getFields(tela_lista_tarefas_paciente._TelaListaTarefasPacienteState.__proto__),
    [_repository$0]: dart.finalFieldType(app_repository.AppRepository),
    [___TelaListaTarefasPacienteState__futureTarefas]: dart.fieldType(dart.nullable(async.Future$(core.List$(tarefa_model.Tarefa))))
  }));
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        this[_data][$clear]();
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return T.LinkedHashMapOfString$Object().from(this[_data]);
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[4]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  var id$0 = dart.privateName(prontuario_model, "Prontuario.id");
  var pacienteId$ = dart.privateName(prontuario_model, "Prontuario.pacienteId");
  var dataConsulta$ = dart.privateName(prontuario_model, "Prontuario.dataConsulta");
  var notasMedico$ = dart.privateName(prontuario_model, "Prontuario.notasMedico");
  var tarefas$ = dart.privateName(prontuario_model, "Prontuario.tarefas");
  prontuario_model.Prontuario = class Prontuario extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get pacienteId() {
      return this[pacienteId$];
    }
    set pacienteId(value) {
      super.pacienteId = value;
    }
    get dataConsulta() {
      return this[dataConsulta$];
    }
    set dataConsulta(value) {
      super.dataConsulta = value;
    }
    get notasMedico() {
      return this[notasMedico$];
    }
    set notasMedico(value) {
      super.notasMedico = value;
    }
    get tarefas() {
      return this[tarefas$];
    }
    set tarefas(value) {
      super.tarefas = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let pacienteId = opts && 'pacienteId' in opts ? opts.pacienteId : null;
      let dataConsulta = opts && 'dataConsulta' in opts ? opts.dataConsulta : null;
      let notasMedico = opts && 'notasMedico' in opts ? opts.notasMedico : null;
      let tarefas = opts && 'tarefas' in opts ? opts.tarefas : null;
      return new prontuario_model.Prontuario.new({id: id, pacienteId: pacienteId, dataConsulta: dataConsulta, notasMedico: notasMedico, tarefas: tarefas});
    }
  };
  (prontuario_model.Prontuario.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let pacienteId = opts && 'pacienteId' in opts ? opts.pacienteId : null;
    let dataConsulta = opts && 'dataConsulta' in opts ? opts.dataConsulta : null;
    let notasMedico = opts && 'notasMedico' in opts ? opts.notasMedico : null;
    let tarefas = opts && 'tarefas' in opts ? opts.tarefas : null;
    this[id$0] = id;
    this[pacienteId$] = pacienteId;
    this[dataConsulta$] = dataConsulta;
    this[notasMedico$] = notasMedico;
    this[tarefas$] = tarefas;
    ;
  }).prototype = prontuario_model.Prontuario.prototype;
  dart.addTypeTests(prontuario_model.Prontuario);
  dart.addTypeCaches(prontuario_model.Prontuario);
  dart.setLibraryUri(prontuario_model.Prontuario, I[10]);
  dart.setFieldSignature(prontuario_model.Prontuario, () => ({
    __proto__: dart.getFields(prontuario_model.Prontuario.__proto__),
    id: dart.finalFieldType(core.String),
    pacienteId: dart.finalFieldType(core.String),
    dataConsulta: dart.finalFieldType(core.DateTime),
    notasMedico: dart.finalFieldType(core.String),
    tarefas: dart.finalFieldType(core.List$(tarefa_model.Tarefa))
  }));
  var id$1 = dart.privateName(tarefa_model, "Tarefa.id");
  var titulo$ = dart.privateName(tarefa_model, "Tarefa.titulo");
  var descricao$ = dart.privateName(tarefa_model, "Tarefa.descricao");
  var concluida$ = dart.privateName(tarefa_model, "Tarefa.concluida");
  tarefa_model.Tarefa = class Tarefa extends core.Object {
    get id() {
      return this[id$1];
    }
    set id(value) {
      super.id = value;
    }
    get titulo() {
      return this[titulo$];
    }
    set titulo(value) {
      this[titulo$] = value;
    }
    get descricao() {
      return this[descricao$];
    }
    set descricao(value) {
      this[descricao$] = value;
    }
    get concluida() {
      return this[concluida$];
    }
    set concluida(value) {
      this[concluida$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let titulo = opts && 'titulo' in opts ? opts.titulo : null;
      let descricao = opts && 'descricao' in opts ? opts.descricao : null;
      let concluida = opts && 'concluida' in opts ? opts.concluida : false;
      return new tarefa_model.Tarefa.new({id: id, titulo: titulo, descricao: descricao, concluida: concluida});
    }
  };
  (tarefa_model.Tarefa.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let titulo = opts && 'titulo' in opts ? opts.titulo : null;
    let descricao = opts && 'descricao' in opts ? opts.descricao : null;
    let concluida = opts && 'concluida' in opts ? opts.concluida : false;
    this[id$1] = id;
    this[titulo$] = titulo;
    this[descricao$] = descricao;
    this[concluida$] = concluida;
    ;
  }).prototype = tarefa_model.Tarefa.prototype;
  dart.addTypeTests(tarefa_model.Tarefa);
  dart.addTypeCaches(tarefa_model.Tarefa);
  dart.setLibraryUri(tarefa_model.Tarefa, I[11]);
  dart.setFieldSignature(tarefa_model.Tarefa, () => ({
    __proto__: dart.getFields(tarefa_model.Tarefa.__proto__),
    id: dart.finalFieldType(core.String),
    titulo: dart.fieldType(core.String),
    descricao: dart.fieldType(core.String),
    concluida: dart.fieldType(core.bool)
  }));
  var paciente$0 = dart.privateName(tela_detalhes_paciente, "TelaDetalhesPaciente.paciente");
  tela_detalhes_paciente.TelaDetalhesPaciente = class TelaDetalhesPaciente extends framework.StatefulWidget {
    get paciente() {
      return this[paciente$0];
    }
    set paciente(value) {
      super.paciente = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let paciente = opts && 'paciente' in opts ? opts.paciente : null;
      return new tela_detalhes_paciente.TelaDetalhesPaciente.new({key: key, paciente: paciente});
    }
    createState() {
      return new tela_detalhes_paciente._TelaDetalhesPacienteState.new();
    }
  };
  (tela_detalhes_paciente.TelaDetalhesPaciente.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let paciente = opts && 'paciente' in opts ? opts.paciente : null;
    this[paciente$0] = paciente;
    tela_detalhes_paciente.TelaDetalhesPaciente.__proto__.new.call(this, {key: key});
    ;
  }).prototype = tela_detalhes_paciente.TelaDetalhesPaciente.prototype;
  dart.addTypeTests(tela_detalhes_paciente.TelaDetalhesPaciente);
  dart.addTypeCaches(tela_detalhes_paciente.TelaDetalhesPaciente);
  dart.setMethodSignature(tela_detalhes_paciente.TelaDetalhesPaciente, () => ({
    __proto__: dart.getMethods(tela_detalhes_paciente.TelaDetalhesPaciente.__proto__),
    createState: dart.fnType(framework.State$(tela_detalhes_paciente.TelaDetalhesPaciente), [])
  }));
  dart.setLibraryUri(tela_detalhes_paciente.TelaDetalhesPaciente, I[12]);
  dart.setFieldSignature(tela_detalhes_paciente.TelaDetalhesPaciente, () => ({
    __proto__: dart.getFields(tela_detalhes_paciente.TelaDetalhesPaciente.__proto__),
    paciente: dart.finalFieldType(usuario_model.Usuario)
  }));
  var _repository$1 = dart.privateName(tela_detalhes_paciente, "_repository");
  var ___TelaDetalhesPacienteState__futureProntuarios = dart.privateName(tela_detalhes_paciente, "_#_TelaDetalhesPacienteState#_futureProntuarios");
  var _futureProntuarios = dart.privateName(tela_detalhes_paciente, "_futureProntuarios");
  var _carregarProntuarios = dart.privateName(tela_detalhes_paciente, "_carregarProntuarios");
  var Divider_color = dart.privateName(divider, "Divider.color");
  var Divider_endIndent = dart.privateName(divider, "Divider.endIndent");
  var Divider_indent = dart.privateName(divider, "Divider.indent");
  var Divider_thickness = dart.privateName(divider, "Divider.thickness");
  var Divider_height = dart.privateName(divider, "Divider.height");
  tela_detalhes_paciente._TelaDetalhesPacienteState = class _TelaDetalhesPacienteState extends framework.State$(tela_detalhes_paciente.TelaDetalhesPaciente) {
    get [_futureProntuarios]() {
      let t2;
      t2 = this[___TelaDetalhesPacienteState__futureProntuarios];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_futureProntuarios")) : t2;
    }
    set [_futureProntuarios](_futureProntuarios$35param) {
      this[___TelaDetalhesPacienteState__futureProntuarios] = _futureProntuarios$35param;
    }
    initState() {
      super.initState();
      this[_carregarProntuarios]();
    }
    [_carregarProntuarios]() {
      this.setState(dart.fn(() => {
        this[_futureProntuarios] = this[_repository$1].getProntuariosPorPaciente(this.widget.paciente.id);
      }, T.VoidTovoid()));
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Prontuários de " + this.widget.paciente.nome)}), body: new (T.FutureBuilderOfListOfProntuario()).new({future: this[_futureProntuarios], builder: dart.fn((context, snapshot) => {
            if (!snapshot.hasData) return C[18] || CT.C18;
            let prontuarios = dart.nullCheck(snapshot.data);
            if (prontuarios[$isEmpty]) {
              return C[34] || CT.C34;
            }
            return new scroll_view.ListView.builder({itemCount: prontuarios[$length], itemBuilder: dart.fn((context, index) => {
                let prontuario = prontuarios[$_get](index);
                return new card.Card.new({margin: C[22] || CT.C22, child: new expansion_tile.ExpansionTile.new({leading: C[36] || CT.C36, title: new text.Text.new("Consulta - " + new date_format.DateFormat.new("dd/MM/yyyy").format(prontuario.dataConsulta)), subtitle: new text.Text.new(dart.str(prontuario.tarefas[$length]) + " tarefa(s) designada(s)"), children: T.JSArrayOfWidget().of([new basic.Padding.new({padding: C[38] || CT.C38, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: (() => {
                            let t2 = T.JSArrayOfWidget().of([new text.Text.new("Notas do Médico:", {style: theme.Theme.of(context).textTheme.titleSmall}), new text.Text.new(prontuario.notasMedico), C[39] || CT.C39, new text.Text.new("Tarefas para o Paciente:", {style: theme.Theme.of(context).textTheme.titleSmall})]);
                            for (let tarefa of prontuario.tarefas)
                              t2.push(new list_tile.ListTile.new({leading: new icon.Icon.new(tarefa.concluida ? icons.Icons.check_box : icons.Icons.check_box_outline_blank), title: new text.Text.new(tarefa.titulo)}));
                            return t2;
                          })()})})])})});
              }, T.BuildContextAndintToCard())});
          }, T.BuildContextAndAsyncSnapshotOfListOfProntuarioToWidget())}), floatingActionButton: new floating_action_button.FloatingActionButton.new({onPressed: dart.fn(() => {
          }, T.VoidTovoid()), child: C[40] || CT.C40, tooltip: "Novo Prontuário"})});
    }
    static ['_#new#tearOff']() {
      return new tela_detalhes_paciente._TelaDetalhesPacienteState.new();
    }
  };
  (tela_detalhes_paciente._TelaDetalhesPacienteState.new = function() {
    this[_repository$1] = app_repository.AppRepository.new();
    this[___TelaDetalhesPacienteState__futureProntuarios] = null;
    tela_detalhes_paciente._TelaDetalhesPacienteState.__proto__.new.call(this);
    ;
  }).prototype = tela_detalhes_paciente._TelaDetalhesPacienteState.prototype;
  dart.addTypeTests(tela_detalhes_paciente._TelaDetalhesPacienteState);
  dart.addTypeCaches(tela_detalhes_paciente._TelaDetalhesPacienteState);
  dart.setMethodSignature(tela_detalhes_paciente._TelaDetalhesPacienteState, () => ({
    __proto__: dart.getMethods(tela_detalhes_paciente._TelaDetalhesPacienteState.__proto__),
    [_carregarProntuarios]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(tela_detalhes_paciente._TelaDetalhesPacienteState, () => ({
    __proto__: dart.getGetters(tela_detalhes_paciente._TelaDetalhesPacienteState.__proto__),
    [_futureProntuarios]: async.Future$(core.List$(prontuario_model.Prontuario))
  }));
  dart.setSetterSignature(tela_detalhes_paciente._TelaDetalhesPacienteState, () => ({
    __proto__: dart.getSetters(tela_detalhes_paciente._TelaDetalhesPacienteState.__proto__),
    [_futureProntuarios]: async.Future$(core.List$(prontuario_model.Prontuario))
  }));
  dart.setLibraryUri(tela_detalhes_paciente._TelaDetalhesPacienteState, I[12]);
  dart.setFieldSignature(tela_detalhes_paciente._TelaDetalhesPacienteState, () => ({
    __proto__: dart.getFields(tela_detalhes_paciente._TelaDetalhesPacienteState.__proto__),
    [_repository$1]: dart.finalFieldType(app_repository.AppRepository),
    [___TelaDetalhesPacienteState__futureProntuarios]: dart.fieldType(dart.nullable(async.Future$(core.List$(prontuario_model.Prontuario))))
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[3]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let preferences = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        if (preferences == null) {
          return new (T.IdentityMapOfString$Object()).new();
        }
        return preferences;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [])
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[13]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[42] || CT.C42;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/pages/comum/tela_selecao_perfil.dart": tela_selecao_perfil,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "file:///zapp/project/lib/models/usuario_model.dart": usuario_model,
    "file:///zapp/project/lib/repositories/app_repository.dart": app_repository,
    "file:///zapp/project/lib/pages/medico/tela_lista_pacientes.dart": tela_lista_pacientes,
    "file:///zapp/project/lib/pages/paciente/tela_lista_tarefas_paciente.dart": tela_lista_tarefas_paciente,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "file:///zapp/project/lib/models/prontuario_model.dart": prontuario_model,
    "file:///zapp/project/lib/models/tarefa_model.dart": tarefa_model,
    "file:///zapp/project/lib/pages/medico/tela_detalhes_paciente.dart": tela_detalhes_paciente,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/pages/comum/tela_selecao_perfil.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.4/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.1.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.0.5/lib/shared_preferences_web.dart","/zapp/project/lib/models/usuario_model.dart","/zapp/project/lib/repositories/app_repository.dart","/zapp/project/lib/pages/medico/tela_lista_pacientes.dart","/zapp/project/lib/pages/paciente/tela_lista_tarefas_paciente.dart","/zapp/project/lib/models/prontuario_model.dart","/zapp/project/lib/models/tarefa_model.dart","/zapp/project/lib/pages/medico/tela_detalhes_paciente.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.1.1/lib/method_channel_shared_preferences.dart"],"names":[],"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__pages__comum__tela_selecao_perfil: tela_selecao_perfil,
    shared_preferences_web: shared_preferences_web,
    zapp__project__lib__models__usuario_model: usuario_model,
    zapp__project__lib__repositories__app_repository: app_repository,
    zapp__project__lib__pages__medico__tela_lista_pacientes: tela_lista_pacientes,
    zapp__project__lib__pages__paciente__tela_lista_tarefas_paciente: tela_lista_tarefas_paciente,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    zapp__project__lib__models__prontuario_model: prontuario_model,
    zapp__project__lib__models__tarefa_model: tarefa_model,
    zapp__project__lib__pages__medico__tela_detalhes_paciente: tela_detalhes_paciente,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
